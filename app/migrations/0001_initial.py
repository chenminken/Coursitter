# Generated by Django 2.1.2 on 2018-12-21 16:38

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Students',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sid', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField()),
                ('location', models.CharField(default='none', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ClassStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=20)),
                ('des', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beganWeek', models.IntegerField()),
                ('endWeek', models.IntegerField()),
                ('inweek', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=10, unique=True)),
                ('course_name', models.CharField(default='abc', max_length=30)),
                ('des', models.TextField(null=True)),
                ('grade', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('des', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('des', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RelCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommandYear', models.CharField(default='freshman', max_length=20)),
                ('courseType', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='courseType', to='app.CourseType')),
                ('current', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current', to='app.Courses')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Departments')),
                ('prerequisites', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prerequisites', to='app.Courses')),
            ],
        ),
        migrations.CreateModel(
            name='RelStuCtable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=20)),
                ('des', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StuClasstable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coin', models.IntegerField(blank=True)),
                ('classobj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Classes')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.RelStuCtable')),
                ('studentobj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Teachers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('des', models.TextField(null=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Departments')),
            ],
        ),
        migrations.CreateModel(
            name='Terms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('begin_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(max_length=10)),
                ('begin_selected', models.DateTimeField(default=datetime.datetime(2018, 12, 21, 16, 38, 59, 785723, tzinfo=utc))),
                ('end_selected', models.DateTimeField(default=datetime.datetime(2018, 12, 21, 16, 38, 59, 785792, tzinfo=utc))),
                ('end_modify', models.DateTimeField(default=datetime.datetime(2018, 12, 21, 16, 38, 59, 785823, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='TimeType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('timeStamp', models.CharField(max_length=20)),
                ('timeInterval', models.IntegerField(default=50)),
            ],
        ),
        migrations.AddField(
            model_name='classtime',
            name='beganInterval',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beganInterval', to='app.TimeType'),
        ),
        migrations.AddField(
            model_name='classtime',
            name='classId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Classes'),
        ),
        migrations.AddField(
            model_name='classtime',
            name='endInterval',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endInterval', to='app.TimeType'),
        ),
        migrations.AddField(
            model_name='classes',
            name='course',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Courses'),
        ),
        migrations.AddField(
            model_name='classes',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ClassStatus'),
        ),
        migrations.AddField(
            model_name='classes',
            name='teacher',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.Teachers'),
        ),
        migrations.AddField(
            model_name='classes',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Terms'),
        ),
        migrations.AddField(
            model_name='students',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Departments'),
        ),
        migrations.AddField(
            model_name='students',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='students',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
